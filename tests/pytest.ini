[pytest]
# Minimum pytest version required
minversion = 6.0

# Test discovery patterns
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Test paths
testpaths = tests

# Command line options
addopts =
    # Verbose output with summary
    -ra
    --strict-markers
    --strict-config
    # Show local variables in tracebacks
    --showlocals
    # Coverage settings
    --cov=cy_redis
    --cov-report=html:htmlcov
    --cov-report=term-missing:skip-covered
    --cov-report=xml
    # Output formatting
    --tb=short
    # Fail on first error (uncomment to enable)
    # -x
    # Parallel execution (uncomment and adjust -n value)
    # -n auto

# Test markers - use with @pytest.mark.<marker>
markers =
    unit: Unit tests that don't require external services
    integration: Integration tests requiring external services
    slow: Tests that take significant time to complete
    cluster: Tests requiring Redis cluster setup
    sentinel: Tests requiring Redis sentinel setup
    async_test: Asynchronous tests
    benchmark: Performance/benchmark tests
    docker: Tests that require Docker to be running
    pgcache: Tests for PostgreSQL cache module
    messaging: Tests for messaging functionality
    rpc: Tests for RPC functionality
    distributed: Tests for distributed features
    requires_redis: Tests that require Redis to be running
    requires_postgres: Tests that require PostgreSQL to be running
    skip_ci: Tests to skip in CI environment

# Timeout settings (requires pytest-timeout)
timeout = 300
timeout_method = thread

# Asyncio settings
asyncio_mode = auto

# Filter warnings
filterwarnings =
    error
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    # Ignore specific warnings from dependencies
    ignore:.*imp module.*:DeprecationWarning
    ignore:.*pkg_resources.*:DeprecationWarning

# Coverage settings
[coverage:run]
source = cy_redis
branch = true
parallel = true
omit =
    */tests/*
    */test_*.py
    */__pycache__/*
    */site-packages/*
    */cyredis_venv/*
    */build/*
    */dist/*

[coverage:report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    if TYPE_CHECKING:
    @abstractmethod
    @abc.abstractmethod
    if 0:
    if False:

[coverage:html]
directory = htmlcov
